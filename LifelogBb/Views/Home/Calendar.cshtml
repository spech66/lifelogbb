@using LifelogBb.Utilities
@model LifelogBb.Models.Home.CalendarViewModel

@{
    ViewData["Title"] = "Calendar - " + Model.Date.ToShortDateString();
}


@functions {
    public string GetCardColor(EntityType type)
    {
        return type switch
        {
            EntityType.Habit => "text-bg-danger",
            _ => "text-bg-secondary"
        };
    }
}

<div class="container-xl">
    <div class="row row-cards mb-3">
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <a asp-action="Calendar" asp-route-date="@DateTime.Now.Date.ToString("yyyy-MM-dd")" style="display: inline">@DateTime.Now.Date.ToString("ddd dd.MM.yyyy")</a>
                    @for(int i = 1; i < 7; i++)
                    {
                        <span>-</span> <a asp-action="Calendar" asp-route-date="@DateTime.Now.AddDays(i).Date.ToString("yyyy-MM-dd")" style="display: inline">@DateTime.Now.AddDays(i).Date.ToString("ddd dd.MM.yyyy")</a>
                    }
                    <form asp-action="Calendar">
                        <div class="input-group mb-2">
                            <input type="date" class="form-control" name="date" value="@Model.Date.ToString("yyyy-MM-dd")">
                            <button class="btn" type="submit">Go</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="row row-cards">
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <table border="0" cellpadding="0" cellspacing="0">
                        @for (var timeSegment = DateTime.Now.Date; timeSegment < DateTime.Now.AddDays(1).Date.AddTicks(-1); timeSegment = timeSegment.AddHours(1))
                        {
                            <tr>
                                <td valign="top" style="padding-right: 8px">@timeSegment.ToString("HH:mm")</td>
                                <td>
                                    @foreach (var eventItem in Model.Events)
                                    {
                                        if (eventItem.StartDate != null && eventItem.StartDate.Value.Hour == timeSegment.Hour)
                                        {
                                            <div class="card mb-2">
                                                <div class="card-status-start @GetCardColor(eventItem.Type)"></div>
                                                <div class="card-body">
                                                    <h5 class="card-title mb-2">
                                                        @eventItem.StartDate.Value.ToString("HH:mm")
                                                        @if(eventItem.EndDate != null)
                                                        {
                                                            <span>- @eventItem.EndDate.Value.ToString("HH:mm")</span>
                                                        }
                                                        <!-- @eventItem.Type -->
                                                    </h5>
                                                    <p class="card-text">@eventItem.Text</p>
                                                </div>
                                            </div>
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
