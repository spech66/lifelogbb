@{
    ViewData["Title"] = "Weight";
    ViewData["Pretitle"] = "Graph";
}

<div class="container-xl">
    <div class="row row-deck row-cards">
        <div class="col-12">
            <div class="card">
                <div class="card-header border-0">
                    <h3 class="card-title">2 Months</h3>
                </div>
                <div class="card-body">
                    <div id="weightChartShort"></div>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="card">
                <div class="card-header border-0">
                    <h3 class="card-title">Year</h3>
                </div>
                <div class="card-body">
                    <div id="weightChartYear"></div>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="card">
                <div class="card-header border-0">
                    <h3 class="card-title">Year - BMI</h3>
                </div>
                <div class="card-body">
                    <div id="weightChartYearBmi"></div>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="card">
                <div class="card-header border-0">
                    <h3 class="card-title">All</h3>
                </div>
                <div class="card-body">
                    <div id="weightChartAll"></div>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="card">
                <div class="card-header border-0">
                    <h3 class="card-title">All - BMI</h3>
                </div>
                <div class="card-body">
                    <div id="weightChartAllBmi"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
    {
    <script src="~/lib/regression/regression.min.js"></script>
    <script src="~/lib/tabler/core/dist/libs/apexcharts/dist/apexcharts.min.js"></script>
    <script type="text/javascript">
        function Measurement(data) {
            this.date = data.createdAt;
            this.weight = data.bodyWeight;
            this.height = data.height;
            this.bmi = (parseFloat(data.bmi).toFixed(1));
            this.bmioverweight = data.bmiOverweight;
            this.bmiunderweight = data.bmiUnderweight;
        }

        function generateChart(selDiv, chartTitle, chartData, chartDataTrend = null, bmiThresholds = null) {
            let datasets = [];
            let colors = ["#4c79b3", "#7EB26D"];

            // Main dataset
            datasets.push({
                name: chartTitle,
                data: chartData
            });

            // Background fills
            if (bmiThresholds != null) {
                for (let bmit of bmiThresholds) {
                    datasets.push(bmit);
                }
                colors = ["#4c79b3", /*bmi-*/"#4c79b3", "#69B34C", "#d19a2b", "#ce3a09", "#b40000", "#b40000", /*-bmi*/];
            }

            if (chartDataTrend != null) {
                chartDataTrend.name = `${chartTitle} ${chartDataTrend.name}`;
                datasets.push(chartDataTrend);
            }

            var options = {
                chart: {
                    type: 'line'
                },
                stroke: {
                    curve: 'smooth'
                },
                colors,
                series: datasets,
                xaxis: {
                    type: "datetime"
                }
            };

            var chart = new ApexCharts(document.querySelector(`#${selDiv}`), options);
            chart.render();
        }

        function generateXYArray(data, maxRange, property) {
            const maxDate = new Date(maxRange);
            return data.filter(dat => new Date(dat.date) > maxDate).map(sel => {
                return {
                    x: sel.date,
                    y: sel[property]
                }
            });
        }

        function generateTrend(data) {
            if (data.length < 2) {
                return null;
            }

            const arrayData = data.map(dat => [
                (new Date(dat.x)).getTime(),
                +dat.y
            ]);
            const result = regression('linear', arrayData);

            const trend = [
                {
                    x: data[0].x,
                    y: Math.round([arrayData[0][0] * result.equation[0] + result.equation[1]]),
                }, {
                    x: data[arrayData.length - 1].x,
                    y: Math.round([arrayData[arrayData.length - 1][0] * result.equation[0] + result.equation[1]])
                }
            ];
            return {
                name: "Trend",
                data: trend
            };
        }

        function generateBmiThresholds(data) {
            if (data.length < 2) {
                return null;
            }
            let xStart = data[0].x;
            let xEnd = data[data.length - 1].x;
            let steps = [15.0, 18.5, 25.0, 30.0, 35.0, 40.0]; // < is name
            // let colors = ["#4c79b3", "#69B34C", "#d19a2b", "#ce3a09", "#b40000", "#b40000"]
            let names = ["Underweight", "Normal", "Overweight", "Moderately obese", "Severely obese", "Very severely obese"]

            let trends = [];
            for (let i = 0; i < steps.length; i++) {
                const trend = [
                    {
                        x: xStart,
                        y: steps[i]
                    }, {
                        x: xEnd,
                        y: steps[i]
                    }
                ];
                trends.push({
                    name: names[i],
                    data: trend
                });
            }
            return trends;
        }

        $(function () {
            $.getJSON("/api/weights", function (data) {
                data = data.value;
                data = data.sort((a, b) => (a.date > b.date) ? 1 : ((b.date > a.date) ? -1 : 0)); // Ascending!
                var mappedMeasurements = $.map(data, function (item) { return new Measurement(item) });

                var twoMonth = (new Date()).setMonth((new Date()).getMonth() - 2); // 2 months ago
                const result2Month = generateXYArray(mappedMeasurements, twoMonth, "weight");
                const result2MonthTrend = generateTrend(result2Month);

                var oneYear = (new Date()).setFullYear(new Date().getFullYear() - 1); // 1 year ago
                console.log(new Date(oneYear));
                const result1Year = generateXYArray(mappedMeasurements, oneYear, "weight");
                const result1YearTrend = generateTrend(result1Year);
                const result1YearBmi = generateXYArray(mappedMeasurements, oneYear, "bmi");
                const result1YearBmiThresholds = generateBmiThresholds(result1YearBmi);

                const resultAll = mappedMeasurements.map(sel => {
                    return {
                        x: sel.date,
                        y: sel.weight
                    }
                });
                const resultAllTrend = generateTrend(resultAll);
                const resultAllBmi = mappedMeasurements.map(sel => {
                    return {
                        x: sel.date,
                        y: sel.bmi
                    }
                });
                const resultAllBmiThresholds = generateBmiThresholds(resultAllBmi);

                generateChart("weightChartShort", "2 Month", result2Month, result2MonthTrend);

                generateChart("weightChartYear", "1 Year Weight", result1Year, result1YearTrend);
                generateChart("weightChartYearBmi", "1 Year BMI", result1YearBmi, null, result1YearBmiThresholds);

                generateChart("weightChartAll", "All", resultAll, resultAllTrend);
                generateChart("weightChartAllBmi", "All BMI", resultAllBmi, null, resultAllBmiThresholds);
            });
        });
    </script>
}
